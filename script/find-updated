#!/usr/bin/perl -w

# Copyright (c) 2004 Matthew Seaman. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#    1.  Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#    2.  Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials
#        provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# @(#) $Id: find-updated,v 1.3 2004-10-31 11:45:17 matthew Exp $
#

# Scan through the ports tree, and pick out all ports containing files
# updated after the date given on the command line.  Optionally print
# names of any ports in the cache that no-longer exist in the tree.  This
# program doesn't modify the cache at all, but it produces output that
# cache-update can use.

use strict;
use warnings;
use BerkeleyDB;
use File::Find;
use POSIX qw(strftime);

use FreeBSD::Portindex::Config qw(read_config);
use FreeBSD::Portindex::Port;
use FreeBSD::Portindex::Tree;

our %Config;
our $pkgname = 'portindex';

$0 =~ s@.*/@@;    # Script name for error messages

# Given a port origin, check for files with a more recent modification
# time than the reference time. Return as soon as one recently updated
# file is found, or once all files have been checked.  Don't check
# ./work or other WRKDIR type directories, and ignore README.html as
# those are generated files.
sub look_for_updated_files ($$)
{
    my $path       = shift;
    my $refmtime   = shift;
    my $is_updated = 0;

    File::Find::find(
        {
            preprocess => sub {
                return grep { !/^(work|README\.html)/ } @_;
            },
            wanted => sub {
                my ($mtime) = ( lstat($_) )[9];
                if ( -f _ && $mtime > $refmtime ) {
                    $File::Find::prune = 1;
                    $is_updated        = 1;
                    print STDERR "$0: ",
                      strftime( '%Y.%m.%d.%H.%M.%S', localtime($mtime) ),
                      " $File::Find::name\n"
                      if $::Config{Verbose};
                }
              }
        },
        $path
    );
    return $is_updated;
}

# Scan through the port directories by reading the SUBDIR variables
# out of port Makefiles.  Remarkably sumilar to
# FreeBSD::Portindex::Tree::_scan_makefiles() -- that function and
# this one should be amalgamated somehow.
sub scan_makefiles ($$$$)
{
    my $path     = shift;
    my $refmtime = shift;
    my $updaters = shift;
    my $allports = shift;
    my @subdirs;

    # Hmmm... Using make(1) to print out the value of the variable
    # (make -V SUBDIRS) takes about 200 times as long as just scanning
    # the Makefiles for definitions of the SUBDIR variable.  Be picky
    # about the format of the SUBDIR assignment lines: SUBDIR is used
    # in some of the leaf Makefiles, but in a different style.

    open( MAKEFILE, '<', "${path}/Makefile" )
      or do {

        # If $path does not exist, or if there's no Makefile there,
        # then something has gone horribly wrong.  Give up trying to
        # recurse at this directory level.

        warn "$0: scan_makefiles(): Can't open Makefile in $path -- $!";
        return;    # Leave out this directory.
      };
    while (<MAKEFILE>) {
        push @subdirs, "${path}/${1}"
          if (m/^\s*SUBDIR\s+\+=\s+(\S+)\s*(#.*)?$/);
    }
    close MAKEFILE
      or do {

        # Even if the close() errors out, we've got this far, so
        # might as well carry on and try and process any output.

        warn "$0: scan_makefiles(): $path/Makefile: close failed -- $!";
      };
    if (@subdirs) {
        for my $subdir (@subdirs) {

            # Recursion means never having to obey a function
            # prototype.

            &scan_makefiles( $subdir, $refmtime, $updaters, $allports );
        }
    } else {

        # Keep track of which ports we've seen: anything we don't see
        # but that is known in the cache must be a deleted or
        # disconnected port.  Anything we do see, but that isn't known
        # in the cache must be a new port.

        print STDERR "$0: $path -- new port\n"
          if ( $::Config{Verbose} && !exists $allports->{$path} );
        $allports->{$path}++;

        # This is a real port directory, not a subdir.

        push @{$updaters}, $path
          if look_for_updated_files( $path, $refmtime );
    }
    return;
}

# Add all of the port origins known in the cache, but not visited
# during scan_makefiles() to the list updated stuff (on the basis that
# those must be ports that have been deleted)
sub deleted_ports($$$)
{
    my $updaters = shift;
    my $allports = shift;
    my $refmtime = shift;

    for my $origin ( keys %{$allports} ) {
        if ( $allports->{$origin} == 0 ) {

            # A port can be unhooked up from the ports system, but the
            # directory left in the tree.  This means the cache will
            # still contain the port data -- don't pass the name to
            # cache-update to recheck unless that directory contains
            # modified files.  On the other hand, the port directory
            # can be removed completely, and cache-update should look
            # at that directory so that it will similarly modify the
            # cache.

            if ( !-d $origin ) {
                push @{$updaters}, $origin;
                print STDERR "$0: $origin has been deleted\n"
                  if $::Config{Verbose};
            } elsif ( look_for_updated_files( $origin, $refmtime ) ) {
                push @{$updaters}, $origin;
                print STDERR
                  "$0: $origin was updated but not connected to ports tree\n"
                  if $::Config{Verbose};
            }
        }
    }
    return;
}

MAIN:
{
    my $tree;
    my @updaters;
    my $reference_date;
    my %allports;

    read_config( \%Config );

    $tree = FreeBSD::Portindex::Tree->new(
        -Env           => { -Home => $Config{CacheDir}, },
        -CacheFilename => $Config{CacheFilename},
        -MasterSlaveFilename => $Config{MasterSlaveFilename},
    );

    # Redirect STDOUT if required
    if ( $Config{Output} ne '-' ) {
        open STDOUT, '>', $Config{Output}
          or die "$0: Can't open output $Config{Output} -- $!\n";
    }

    $tree->port_origins( \%allports );

    # Scan through all ports, looking for files newer than the cut-off
    # date.

    scan_makefiles( $Config{PortsDir}, $Config{ReferenceTime}, \@updaters,
        \%allports );

    # Add all of the deleted ports to the list of stuff to update

    deleted_ports( \@updaters, \%allports, $Config{ReferenceTime} );

    print join( "\n", @updaters ), "\n"
      if @updaters;
}

__END__


=head1 NAME

find-updated -- generate a list of those ports whose files have been
modified since the given date/time.

=head1 SYNOPSIS

B<find-updated> [B<-hvq>] [B<-c> F<dir>] [B<-C> F<file>] [B<-M> F<file>] [B<-T> F<file>] [B<-o> F<file>] date

=head1 DESCRIPTION

B<find-updated> scans through the whole ports tree and checks each
port origin for files modified after the date given on the command
line.  The output consists of a list of modified ports, printed one
per line suitable for feeding into the input of B<cache-update> using
plain format.

Only file modification times are checked, not directories.  Files
named F<README.html> or any F<work> subdirectories are ignored.

The date specification must be given strictly in the B<cvsup>-style of
I<yyyy.mm.dd.HH.MM.SS> with four digits for the year, and two each for
the month, day of the month, hour (24 hour clock), minutes and
seconds.  The local timezone is assumed.  To print out a date in the
required format, use:
	
	date +%Y.%m.%d.%H.%M.%S

B<find-update> does a further level of checking by comparing the list
of port origins obtained from the cache with all of the ports it scans
for modifications.  Any ports listed in the cache, but either not
present in the ports tree on disk, or not referenced from the
F<Makefile>s in the ports tree, but containing modified files will be
added to the output.  B<cache-update> will recognise if the port has
been deleted or not and modify the cache accordingly.

=head2 Configuration Files

B<find-updated> shares configuration files with B<portindex>,
B<cache-init> and B<cache-update>.  Any configuration settings are
taken from the following locations, where the later items on this list
override the former:

=over 8

=item *

Built-in settings from the B<FreeBSD::Portindex::Config> perl module.

=item *

The system wide configuration file F</usr/local/etc/portindex.cfg>

=item *

The per-user configuration file F<${HOME}/.portindexrc>

=item *

The local configuration file, found in the current working directory
of the B<cache-init> process F<./.portindexrc>

=item *

The program command line.

=back

All of the configuration files are optional.  A summary of the
resultant configuration options including the effect of any command
line settings is printed as part of the help text when B<portindex> is
invoked with the C<-h> option.

=head1 OPTIONS

=over 8

=item B<-h>

=item B<--help>

Print a brief usage message and a summary of the configuration
settings after command line processing and then exit.

=item B<-v>

=item B<--verbose>

Turn on verbose output printed to C<STDERR>.

=item B<-q>

=item B<--quiet>

=item B<--noverbose>

Turn off verbose output to C<STDERR>.  Using both the B<-v> amd B<-q>
options together does not make any sense, but neither does it generate
an error.  The last mentioned of the two options will prevail.

=item B<-c> F<dir>

=item B<--cache-dir>=F<dir>

The location of the B<portindex> data caches, by default
F</var/db/portindex>.

=item B<-C> F<file>

=item B<--cache-file>=F<file>

Berkeley DB Btree file containing the cached output of C<make
describe> for all of the ports in the tree.  This file name will be
relative to the cache directory (B<-c> option above) unless an
absolute path is given.  As for the main cache file, the file name is
relative to the cache directory unless an absolute path is given.
Defaults to F<portindex-cache.db>.

=item B<-M> F<file>

=item B<--master-slave-file>=F<file>

Berkeley DB Btree file containing the port origins of all slave ports
referenced to their master ports.  A slave port is defined as one
where the C<MASTERDIR> B<make> variable does not have a value that
resolves to the same as the port origin directory. Defaults to
F<portindex-masterslave.db>.

=item B<-T> F<file>

=item B<--timestamp-file>=F<file>

A file within the cache directory whose modification time marks the
last time that data was modified in or added to the cache.

=item B<-o> F<file>

=item B<--output>=F<file>

Filename to write the generated list of updated ports to.  Setting this to
F<-> means output to STDOUT, which is the default.

=back

=head1 FILES

=over 16

=item F</usr/ports>

The default ports directory.

=item F</var/db/portindex>

The location of the data caches.

=item F<portindex-cache.db>

Btree file containing cached C<make describe> output.

=item F<portindex-masterslave.db>

Btree file containing details of master-slave relationships between ports.

=item F<__db.001>, F<__db.002>, F<__db.003>

Files used as part of the internal workings of BerkeleyDB, for memory
pool management and DB locking.  Will be recreated automatically if
deleted.

=item F<portindex-timestamp>

This file contains the last time and date that the cache was updated
or modified.

=item F</usr/local/etc/portindex.cfg>

System-wide configuration file.

=item F<${HOME}/.portindexrc>

Per-user configuration file

=item F<./.portindexrc>

Local configuration file

=back

=head1 SEE ALSO

L<portindex(1)>, L<cache-init(1)>, L<cache-update(1)>, L<cvsup(1)>,
L<ports(7)>

=head1 BUGS

Any port which is disconnected from the ports tree rather than being
deleted will remain listed in the cache, and so will still result in
an entry in the F<INDEX> file.  B<find-updated> will check any known
but disconnected ports for updates.  The only way to purge the cache
of disconnected ports is by starting afresh using B<cache-init>.

=cut

#
# That's All Folks!
#
