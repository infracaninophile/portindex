#!/usr/bin/perl -w

# Copyright (c) 2004 Matthew Seaman. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#    1.  Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#    2.  Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials
#        provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# @(#) $Id: cache-update,v 1.1 2004-10-13 16:02:50 matthew Exp $
#

# Generate an incremental update to the cached 'make describe' output,
# for the listed port origins.  Requires (a) previously build cache of
# the whole ports tree, including a table showing which ports are
# slave ports and which are masters and (b) a method for automatically
# determining which ports were affected since the last cache update
# (Not yet implemented -- but will involve parsing the cvsup checkouts
# file).
#
# Running the make_describe method on a candidate port will chdir to
# that path and run 'make describe' in the given directory, process
# that output into a FreeBSD::Port object, and save a frozen version
# into the ports cache.  It will also run 'make -V MASTERDIR' and
# record that output in the masterslave file if MASTERDIR is not the
# same as CWD.  Failing to run 'make describe' successfully results in
# that port data being removed from the cache -- which is how
# deletions and port moves are handled.
#
# The Master/Slave port relationships recorded from a previous run are
# applied to force an update for all slave ports whenever the master
# port is updated.
#
# TODO:
#
# Documentation, documentation, documentation!
#
# Command line option parsing / config file
#
# Parse the cvsup checkouts file to find all of the files modified
# since the last update.

use strict;
use warnings;

use FreeBSD::Port;
use FreeBSD::Ports::Tree;

our $verbose;

$0 =~ s@.*/@@;    # Script name for error messages
$::verbose = 1;   # Be garrulous.

MAIN:
{
    my $tree;
    my $allports;
    my $masterslave;
    my @updaters;
    my $counter = 0;

    $tree = FreeBSD::Ports::Tree->new(
        -Env                 => { -Home => '/var/tmp', },
        -CacheFilename       => 'portindex-cache.db',
        -MasterSlaveFilename => 'portindex-masterslave.db'
    );

    # If one of the ports given in the @updaters list is the master of
    # several slave ports, add all of those slave ports to the
    # @updaters list, unconditionally.  This only works if the cache
    # is largely complete.

    $masterslave = $tree->masterslave();

    # Update the entries for the ports read from STDIN, plus the
    # slaves of any masters listed.

    while (<>) {
        chomp;
        push @updaters, $_;

        push @updaters, @{ $masterslave->{$_} }
          if ( defined $masterslave->{$_} );
    }

    # Regenerate the FreeBSD::Port objects for all listed ports

    for my $path ( sort @updaters ) {
        $counter++;
        print STDERR "$0:$counter: Updating cached data for $path\n";
        $tree->make_describe($path);
    }
}

#
# That's All Folks!
#
